package com.attendance.controller;

import com.attendance.entity.Category;
import com.attendance.entity.Student;
import com.attendance.repository.CategoryRepository;
import com.attendance.service.FileStorageService;
import com.attendance.service.StudentService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/api/students")
@CrossOrigin(origins = "http://localhost:5173")
public class StudentController {

    @Autowired
    private StudentService studentService;

    @Autowired
    private CategoryRepository categoryRepository;

    @Autowired
    private FileStorageService fileStorageService;  // âœ… Inject FileStorageService

    @GetMapping
    public List<Student> getAllStudents() {
        return studentService.getAllStudents();
    }

    @GetMapping("/{id}")
    public Optional<Student> getStudentById(@PathVariable Long id) {
        return studentService.getStudentById(id);
    }

    @PostMapping
    public Student createStudent(
        @RequestParam("name") String name,
        @RequestParam("prn") String prn,
        @RequestParam("gender") String gender,
        @RequestParam("fatherName") String fatherName,
        @RequestParam("email") String email,
        @RequestParam("dob") String dob,
        @RequestParam("categoryId") Long categoryId,
        @RequestParam(value = "resume", required = false) MultipartFile resumeFile,
        @RequestParam(value = "image", required = false) MultipartFile imageFile
    ) {
        Student student = new Student();
        student.setName(name);
        student.setPrn(prn);
        student.setGender(gender);
        student.setFatherName(fatherName);
        student.setEmail(email);
        student.setDob(dob);

        // Save category
        Optional<Category> category = categoryRepository.findById(categoryId);
        category.ifPresent(student::setCategory);

        // Upload files
        if (resumeFile != null) {
            String resumeUrl = fileStorageService.storeFile(resumeFile);
            student.setResume(resumeUrl);
        }
        if (imageFile != null) {
            String imageUrl = fileStorageService.storeFile(imageFile);
            student.setImage(imageUrl);
        }

        return studentService.saveStudent(student);
    }

    @PutMapping("/{id}")
    public Student updateStudent(
        @PathVariable Long id,
        @RequestParam("name") String name,
        @RequestParam("prn") String prn,
        @RequestParam("gender") String gender,
        @RequestParam("fatherName") String fatherName,
        @RequestParam("email") String email,
        @RequestParam("dob") String dob,
        @RequestParam("categoryId") Long categoryId,
        @RequestParam(value = "resume", required = false) MultipartFile resumeFile,
        @RequestParam(value = "image", required = false) MultipartFile imageFile
    ) {
        Optional<Student> existingStudent = studentService.getStudentById(id);
        if (existingStudent.isPresent()) {
            Student student = existingStudent.get();
            student.setName(name);
            student.setPrn(prn);
            student.setGender(gender);
            student.setFatherName(fatherName);
            student.setEmail(email);
            student.setDob(dob);

            Optional<Category> category = categoryRepository.findById(categoryId);
            category.ifPresent(student::setCategory);

            if (resumeFile != null) {
                String resumeUrl = fileStorageService.storeFile(resumeFile);
                student.setResume(resumeUrl);
            }
            if (imageFile != null) {
                String imageUrl = fileStorageService.storeFile(imageFile);
                student.setImage(imageUrl);
            }

            return studentService.saveStudent(student);
        } else {
            return null;
        }
    }

    @DeleteMapping("/{id}")
    public void deleteStudent(@PathVariable Long id) {
        studentService.deleteStudent(id);
    }
}
