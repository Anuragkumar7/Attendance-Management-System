package com.attendance.security;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.web.filter.OncePerRequestFilter;
import org.springframework.util.StringUtils;
import java.io.IOException;

public class JwtAuthenticationFilter extends OncePerRequestFilter { // ‚úÖ Use OncePerRequestFilter

	@Override
	protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
	        throws ServletException, IOException {

	    String path = request.getRequestURI();
	    System.out.println("üîç Processing request to: " + path);

	    if (shouldNotFilter(request)) {
	        System.out.println("‚úÖ Skipping JWT filter for: " + path);
	        filterChain.doFilter(request, response);
	        return;
	    }

	    String token = getTokenFromRequest(request);
	    if (token != null && JwtUtils.validateToken(token)) {
	        String username = JwtUtils.getUsernameFromToken(token);

	        UserDetails userDetails = User.withUsername(username)
	                .password("")  // No password needed
	                .authorities(new java.util.ArrayList<>()) // No roles assigned
	                .build();

	        UsernamePasswordAuthenticationToken authentication =
	                new UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities());

	        authentication.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));
	        SecurityContextHolder.getContext().setAuthentication(authentication);
	    }

	    filterChain.doFilter(request, response);
	}


    private String getTokenFromRequest(HttpServletRequest request) {
        String bearerToken = request.getHeader("Authorization");
        if (StringUtils.hasText(bearerToken) && bearerToken.startsWith("Bearer ")) {
            return bearerToken.substring(7);
        }
        return null;
    }
    @Override
    protected boolean shouldNotFilter(HttpServletRequest request) throws ServletException {
        String path = request.getRequestURI();
        return path.startsWith("/api/auth/");  // Skip authentication for login/signup
    }

}
